package com.example.airpollution;

import androidx.appcompat.app.AppCompatActivity;

import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.view.View;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;


public class map_Activity extends AppCompatActivity {
    private Region[] regions;
    private final static float[][] points = {{132, 53, 154, 58, 187, 80, 207, 81, 208, 101, 181, 112, 171, 141, 214, 163, 218, 188, 152, 277, 108, 257, 95, 207, 68, 161, 78, 109, 107, 103, 125, 90, 123, 64},
            {214, 162, 286, 147, 333, 164, 319, 216, 330, 232, 302, 241, 273, 301, 304, 318, 289, 336, 260, 346, 228, 350, 203, 330, 194, 321, 152, 277, 182, 227, 218, 189},
            {334, 164, 357, 160, 449, 193, 480, 190, 447, 214, 424, 213, 411, 234, 428, 255, 405, 284, 406, 316, 422, 325, 410, 363, 364, 362, 324, 380, 300, 357, 304, 340, 289, 336, 304, 317, 273, 301, 302, 241, 330, 232, 320, 216},
            {480, 189, 447, 214, 424, 213, 411, 234, 428, 255, 405, 284, 406, 316, 422, 325, 444, 311, 468, 317, 495, 306, 534, 323, 574, 293, 600, 300, 620, 294, 630, 277, 651, 306, 676, 283, 665, 262, 649, 260, 669, 235, 663, 215, 683, 202, 659, 190, 642, 194, 618, 181, 590, 188, 561, 186, 532, 172, 514, 172},
            {423, 362, 430, 390, 447, 397, 461, 422, 444, 441, 469, 440, 495, 446, 512, 447, 518, 436, 534, 436, 546, 440, 558, 455, 589, 452, 622, 451, 623, 437, 615, 413, 604, 413, 597, 378, 613, 370, 607, 350, 617, 343, 614, 327, 639, 330, 652, 307, 630, 277, 621, 294, 600, 300, 574, 293, 534, 323, 495, 307, 468, 317, 444, 312, 420, 323, 410, 363, 423, 362},
            {652, 303, 676, 283, 665, 263, 649, 259, 670, 235, 663, 215, 683, 202, 701, 212, 735, 204, 737, 213, 719, 223, 727, 240, 739, 238, 738, 257, 756, 275, 767, 264, 785, 279, 814, 276, 816, 288, 847, 293, 843, 306, 855, 325, 843, 350, 858, 370, 849, 381, 868, 390, 841, 411, 845, 421, 825, 435, 800, 437, 768, 432, 750, 439, 749, 407, 737, 394, 745, 376, 689, 364, 686, 350, 650, 354, 650, 342, 639, 331},
            {614, 326, 639, 326, 650, 342, 650, 354, 686, 350, 689, 364, 745, 376, 737, 395, 749, 407, 749, 439, 747, 449, 722, 444, 708, 452, 684, 447, 670, 449, 664, 436, 622, 451, 625, 437, 615, 413, 604, 413, 597, 378, 613, 370, 607, 349, 617, 343},
            {833, 278, 818, 267, 842, 236, 871, 237, 867, 204, 882, 196, 900, 208, 910, 202, 928, 199, 919, 186, 929, 164, 909, 166, 906, 141, 921, 109, 910, 96, 862, 112, 790, 176, 735, 204, 737, 213, 719, 223, 727, 240, 739, 238, 738, 257, 756, 275, 767, 264, 785, 279, 814, 276, 816, 288, 832, 290},
            {917, 119, 951, 126, 991, 156, 1010, 150, 1040, 188, 1060, 183, 1080, 195, 1100, 163, 1140, 151, 1150, 132, 1170, 136, 1180, 108, 1170, 95, 1130, 104, 1096, 72, 1020, 70, 987, 87, 907, 96, 921, 109},
            {1196, 121, 1231, 106, 1249, 148, 1299, 171, 1368, 181, 1374, 230, 1345, 279, 1294, 270, 1262, 293, 1240, 270, 1222, 283, 1166, 239, 1150, 250, 1131, 216, 1103, 219, 1080, 195, 1098, 163, 1143, 151, 1149, 130, 1167, 136, 1180, 103},
            {916, 119, 950, 126, 991, 156, 1007, 150, 1043, 188, 1047, 201, 1023, 218, 1009, 223, 1002, 244, 986, 253, 986, 269, 976, 270, 965, 289, 934, 282, 931, 256, 909, 258, 910, 242, 884, 226, 871, 237, 867, 204, 882, 196, 900, 208, 911, 202, 928, 199, 919, 186, 929, 164, 910, 166, 906, 141},
            {1262, 293, 1240, 270, 1222, 283, 1165, 234, 1148, 244, 1131, 214, 1106, 237, 1110, 256, 1100, 272, 1102, 292, 1091, 306, 1101, 330, 1076, 347, 1086, 366, 1055, 376, 1063, 392, 1089, 384, 1108, 390, 1140, 411, 1176, 408, 1201, 425, 1225, 421, 1226, 371, 1237, 333, 1229, 328, 1249, 321},
            {999, 276, 989, 292, 994, 317, 974, 336, 976, 358, 962, 367, 956, 381, 950, 397, 970, 404, 998, 395, 1037, 393, 1046, 400, 1063, 392, 1056, 376, 1086, 366, 1076, 347, 1101, 330, 1091, 306, 1102, 292, 1100, 272, 1110, 256, 1106, 237, 1131, 216, 1103, 219, 1084, 196, 1061, 183, 1040, 188, 1047, 201, 1023, 218, 1009, 223, 1002, 244, 986, 253, 986, 269},
            {882, 385, 900, 367, 925, 379, 940, 373, 956, 381, 962, 367, 976, 358, 974, 336, 994, 312, 989, 292, 1000, 276, 986, 269, 976, 270, 965, 289, 934, 282, 931, 256, 909, 258, 910, 242, 884, 226, 871, 237, 842, 236, 818, 267, 833, 278, 832, 290, 843, 306, 855, 325, 843, 350, 858, 370, 849, 381, 868, 390},
            {950, 397, 971, 404, 998, 395, 1037, 393, 1046, 400, 1063, 392, 1089, 384, 1108, 390, 1140, 411, 1176, 408, 1201, 425, 1225, 421, 1229, 460, 1194, 457, 1191, 472, 1174, 478, 1174, 498, 1146, 500, 1134, 525, 1173, 529, 1188, 539, 1195, 575, 1257, 652, 1218, 650, 1212, 665, 1182, 656, 1159, 677, 1095, 623, 1083, 636, 1051, 626, 1028, 608, 1034, 575, 1013, 549, 1032, 535, 1017, 526, 981, 464, 973, 447, 956, 431},
            {868, 390, 842, 411, 845, 421, 825, 435, 794, 439, 811, 488, 800, 500, 814, 520, 805, 530, 826, 564, 867, 577, 882, 547, 871, 551, 871, 536, 880, 540, 880, 520, 905, 525, 920, 496, 952, 491, 966, 462, 981, 464, 973, 447, 956, 433, 950, 397, 956, 381, 940, 373, 925, 379, 900, 367, 882, 385},
            {873, 594, 943, 606, 938, 623, 944, 637, 938, 649, 950, 670, 962, 657, 987, 663, 995, 654, 1007, 659, 1034, 651, 1051, 626, 1028, 608, 1034, 575, 1013, 549, 1032, 535, 1017, 526, 981, 464, 967, 462, 952, 491, 920, 496, 905, 525, 880, 520, 880, 540, 871, 536, 871, 551, 882, 548, 867, 577},
            {627, 506, 661, 528, 645, 540, 657, 574, 640, 580, 645, 607, 674, 604, 690, 618, 713, 623, 750, 600, 783, 636, 809, 619, 841, 644, 865, 634, 873, 594, 867, 577, 826, 564, 805, 530, 814, 520, 800, 500, 811, 488, 795, 435, 768, 432, 748, 439, 747, 449, 722, 444, 708, 452, 684, 447, 671, 449, 661, 436, 622, 451},
            {943, 606, 938, 623, 944, 637, 938, 649, 950, 670, 943, 696, 913, 697, 901, 724, 864, 718, 848, 733, 858, 750, 868, 780, 864, 810, 821, 833, 793, 811, 801, 793, 780, 780, 793, 759, 793, 744, 776, 752, 750, 754, 750, 725, 708, 708, 696, 693, 684, 706, 666, 679, 683, 656, 680, 640, 690, 618, 713, 623, 750, 600, 783, 636, 809, 618, 841, 644, 865, 634, 873, 594},
            {808, 841, 795, 829, 768, 839, 740, 837, 732, 847, 721, 845, 680, 860, 647, 830, 656, 813, 659, 789, 644, 780, 635, 787, 625, 764, 642, 754, 632, 722, 636, 707, 652, 696, 653, 686, 666, 679, 684, 706, 695, 693, 708, 708, 750, 725, 750, 754, 793, 744, 793, 759, 780, 780, 801, 793, 793, 812, 822, 832},
            {647, 830, 656, 813, 658, 789, 644, 780, 635, 787, 625, 764, 642, 754, 632, 722, 636, 707, 624, 694, 615, 722, 607, 719, 604, 726, 590, 732, 579, 724, 583, 714, 570, 707, 576, 694, 563, 679, 531, 682, 521, 673, 506, 671, 500, 686, 490, 687, 479, 723, 451, 725, 431, 740, 436, 747, 426, 774, 451, 780, 465, 767, 478, 782, 523, 770, 540, 808, 564, 806, 584, 827, 604, 812},
            {503, 619, 524, 612, 509, 572, 514, 562, 505, 545, 505, 528, 494, 520, 500, 500, 514, 491, 490, 468, 495, 446, 512, 447, 518, 436, 534, 436, 546, 440, 557, 455, 589, 453, 624, 449, 627, 506, 661, 528, 645, 540, 657, 574, 640, 580, 645, 607, 674, 604, 691, 618, 680, 640, 683, 660, 666, 682, 653, 686, 652, 696, 636, 707, 624, 694, 615, 722, 607, 719, 604, 726, 590, 732, 579, 724, 583, 714, 570, 707, 576, 694, 563, 679, 531, 682, 521, 673, 506, 671},
            {500, 500, 494, 520, 505, 528, 505, 545, 514, 562, 509, 572, 524, 612, 503, 619, 506, 671, 500, 686, 490, 687, 479, 723, 451, 725, 431, 740, 391, 705, 383, 706, 370, 695, 363, 653, 375, 640, 370, 634, 374, 614, 363, 604, 383, 591, 394, 570, 404, 577, 415, 569, 403, 561, 406, 546, 420, 545, 427, 524, 407, 524, 397, 500, 420, 500, 438, 495, 451, 481, 467, 479, 487, 500, 493, 496},
            {428, 796, 407, 804, 396, 791, 374, 801, 367, 813, 346, 810, 337, 820, 294, 815, 280, 821, 264, 815, 255, 831, 222, 837, 213, 832, 194, 833, 193, 811, 197, 789, 192, 750, 209, 731, 196, 713, 179, 683, 173, 648, 192, 628, 214, 642, 244, 627, 290, 638, 306, 626, 323, 629, 340, 606, 363, 604, 374, 614, 370, 634, 375, 640, 363, 653, 370, 695, 383, 706, 391, 705, 430, 737, 436, 747, 430, 774},
            {197, 353, 186, 359, 176, 374, 158, 386, 151, 409, 182, 430, 213, 459, 246, 452, 259, 411, 279, 425, 301, 417, 315, 428, 327, 420, 339, 424, 327, 460, 305, 470, 317, 485, 315, 507, 331, 519, 339, 536, 317, 540, 313, 522, 304, 513, 293, 512, 291, 524, 264, 511, 252, 523, 251, 551, 266, 555, 282, 576, 281, 587, 268, 602, 295, 605, 300, 613, 312, 616, 314, 623, 306, 626, 323, 629, 340, 606, 363, 605, 383, 591, 394, 570, 404, 577, 415, 569, 403, 561, 406, 546, 420, 545, 427, 524, 407, 525, 397, 499, 420, 500, 438, 495, 451, 481, 467, 479, 487, 500, 493, 496, 500, 500, 514, 491, 490, 468, 497, 446, 469, 440, 444, 441, 460, 422, 447, 397, 430, 390, 423, 362, 410, 363, 364, 362, 324, 380, 300, 358, 305, 341, 289, 336, 257, 346, 203, 330},
            {213, 459, 246, 452, 259, 411, 279, 425, 301, 417, 315, 428, 327, 420, 339, 424, 327, 460, 305, 470, 317, 485, 315, 507, 331, 519, 339, 536, 317, 540, 313, 522, 304, 513, 293, 512, 291, 524, 264, 511, 260, 500, 234, 493, 240, 476, 227, 473},
            {240, 555, 227, 543, 220, 554, 204, 543, 182, 556, 160, 544, 142, 527, 143, 515, 132, 509, 118, 484, 104, 486, 89, 478, 97, 453, 84, 430, 104, 414, 123, 410, 137, 415, 153, 407, 182, 430, 213, 459, 227, 473, 240, 476, 234, 493, 260, 500, 266, 512, 252, 523, 251, 551},
            {251, 551, 266, 555, 282, 576, 281, 587, 268, 602, 295, 605, 300, 613, 312, 616, 314, 623, 306, 626, 290, 638, 244, 627, 214, 642, 192, 628, 173, 648, 110, 620, 71, 568, 86, 563, 94, 543, 103, 547, 109, 519, 84, 498, 90, 478, 104, 486, 118, 484, 132, 509, 143, 515, 142, 527, 160, 544, 182, 556, 204, 543, 220, 554, 227, 543, 240, 555}};
    private final static String[] regionNames = {"Видин", "Монтана", "Враца", "Плевен", "Ловеч", "Велико Търново", "Габрово",
            "Русе", "Силистра", "Добрич", "Разград", "Варна", "Шумен", "Търговище",
            "Бургас", "Сливен", "Ямбол", "Стара Загора", "Хасково", "Кърджали", "Смолян",
            "Пловдив", "Пазарджик", "Благоевград", "София-област", "София", "Перник", "Кюстендил"};

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        String fileName = getIntent().getStringExtra("fileName");

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_map_);

        RelativeLayout group = findViewById(R.id.relativeLayout);
        group.setBackgroundColor(Color.parseColor("#fbfbfb"));

        //group.setTranslationX();
        group.setTranslationY(-20);

        regions = new Region[28];

        initializeRegions(regions);

        processData(fileName);

        for (int i = 0; i < regions.length; i++) {
            Paint paint = new Paint();
            double pollution = regions[i].getPollution();
            if (pollution > 1 && pollution < 1.25) paint.setColor(Color.parseColor("#FFFF00"));
            else if (pollution >= 1.25 && pollution < 1.50) paint.setColor(Color.parseColor("#ffa500"));
            else if (pollution >= 1.50 && pollution < 1.75) paint.setColor(Color.parseColor("#e53e00"));
            else if (pollution >= 1.75 && pollution < 2.00) paint.setColor(Color.parseColor("#e50000"));
            else if (pollution >= 2.00) paint.setColor(Color.parseColor("#404040"));
            else paint.setColor(Color.parseColor("#00b200"));
            group.addView(new drawRegion(this, regions[i].getPoints(), paint));
        }


        group.setAlpha(0);

        group.animate()
                .alpha(1f)
                .setDuration(1500);
    }


    public void buttonPrint(View view) {

       TextView txt = findViewById(R.id.txtView);

        String idString = getResources().getResourceName(view.getId());
        int idNumber = buttonIdConverter(idString);

        String regionPollution = Double.toString(regions[idNumber].getPollution());
        regionPollution += " пъти над нормата";
        String regionName = regions[idNumber].getName();

        if(regionPollution.equals("0.0 пъти над нормата"))regionPollution = "чист въздух";

        String text = regionName + " - " + regionPollution;

        txt.setAlpha(1);
        txt.setText(text);
        txt.animate().alpha(0f).setDuration(5000);

    }

    private void initializeRegions(Region[] regions) {
        for (int i = 0; i < 28; i++) {
            regions[i] = new Region(regionNames[i], points[i]);
        }
    }

    private void processData(String fileName)
    {
        clearPollutionData();

        TextView txt = findViewById(R.id.txtView); // Setting the date under the map
        String underText = "Данни за ";
        txt.setText(underText+getDate(fileName));

        ImageView img = findViewById(R.id.imageView);
        img.setBackgroundResource(R.drawable.da);


        dataReader reader = new dataReader();   // Reading the file as one long string then splitting it
        reader.readFile(this, fileName);
        String resultString = reader.allData;
        String[] lines = resultString.split("\n");

        for(int i = 0; i < lines.length; i++)
        {
            String[] fields = lines[i].split(",");

            String cityName = removeChars(fields[0]);
            double pollutionData;
            try {
                pollutionData = getPollutionData(fields[4]);
            }
            catch(Exception e)
            {
                pollutionData = 0;
            }

            // Comparing the name from the data with the names of the regions to set pollution level
            for(int j = 0; j < regions.length; j++)
            {
                if(cityName.equals(regions[j].getName().split(" ")[0]))
                {
                    regions[j].setPollution(pollutionData);
                }
            }
        }
    }

    private String removeChars(String str)
    {
        String[] tokens = str.split(" ");
        char[] chr = tokens[0].toCharArray();

        int i = 1;
        if(chr[chr.length-1] == '"') i++;

        char[] resultChr = new char[chr.length-i];

        System.arraycopy(chr, 1, resultChr, 0, chr.length-i);

        return new String(resultChr);
    }

    private Double getPollutionData(String str)
    {
        char[] chr = str.toCharArray();
        char[] resultChr = new char[chr.length-2];
        System.arraycopy(chr, 1, resultChr, 0, chr.length-2);

        String resultStr = new String(resultChr);
        return Double.parseDouble(resultStr);
    }

    private void clearPollutionData()
    {
        for(int i = 0; i < regions.length; i++)
        {
            regions[i].setPollution(0);
        }
    }

    private int buttonIdConverter(String str)
    {
        String[] tokens = str.split("_");
        return Integer.parseInt(tokens[1]);
    }

    private String getDate(String s)
    {
        String[] tokens = s.split(" ");
        return tokens[0];
    }


}
